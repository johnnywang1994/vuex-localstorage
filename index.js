import Vue from"vue";import{mapState,mapActions}from"vuex";let enableEncoded=!1,VuexKey="$ls",WebKey="store";const REFRESH_LOCALSTORE="REFRESH_LOCALSTORE",EDIT_LOCALSTORE="EDIT_LOCALSTORE",actions={initLocalStorage({commit:e,dispatch:t,state:o}){let a=localStorage.getItem(WebKey);if(null!==a){try{a=JSON.parse(a)}catch{a=JSON.parse(atob(a))}e(REFRESH_LOCALSTORE,{...o[VuexKey],...a.expire?Date.now()<a.expire&&a:a})}t("refreshLocalStorage")},refreshLocalStorage({state:e}){const t=JSON.stringify(e[VuexKey]);localStorage.setItem(WebKey,enableEncoded?btoa(t):t)},editLocalStore:{root:!0,handler({commit:e,dispatch:t},o){e(EDIT_LOCALSTORE,o),t("refreshLocalStorage")}}},mutations={[REFRESH_LOCALSTORE](e,t){e[VuexKey]=t},[EDIT_LOCALSTORE](e,t){const{key:o,value:a}=t;e[VuexKey][o]=a}};export default{register(e,t={}){const{stateKey:o,userKey:a,encode:r,state:s}=t;o&&(VuexKey=o),a&&(WebKey=a),r&&(enableEncoded=r);const c={namespaced:!0,state:{[VuexKey]:s||{}},actions:actions,mutations:mutations};Vue.mixin({computed:{...mapState("LocalStore",[VuexKey])},methods:{...mapActions({_editLocalStore:"editLocalStore"})}}),e.registerModule("LocalStore",c)}};export const bindLocalStore=e=>({get(){return this[VuexKey][e]},set(t){this._editLocalStore({key:e,value:t})}});